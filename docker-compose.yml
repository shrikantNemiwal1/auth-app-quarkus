version: "3.8"

networks:
  app-net:

volumes:
  postgres_data:

services:
  # PostgreSQL (internal only in prod)
  postgres:
    image: postgres:15-alpine
    container_name: auth-postgres
    environment:
      POSTGRES_DB: authdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-net
    # NOTE: no ports published in prod

  # Quarkus Backend (internal)
  quarkus-service:
    build:
      context: ./quarkus-service
      dockerfile: src/main/docker/Dockerfile.jvm
    container_name: auth-quarkus
    environment:
      - QUARKUS_PROFILE=prod
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://postgres:5432/authdb
      - QUARKUS_DATASOURCE_USERNAME=postgres
      - QUARKUS_DATASOURCE_PASSWORD=postgres
      - JAVA_OPTS=-Xmx256m -Xms128m
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-net
    # TIP: add healthcheck hitting /q/health if curl is in the image

  # Node.js Proxy (internal)
  node-proxy:
    build:
      context: ./node-proxy
    container_name: auth-node
    environment:
      - QUARKUS_URL=http://quarkus-service:8080/api
      - SESSION_SECRET=production-secret-key-change-me-min-32-chars
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=128
    depends_on:
      quarkus-service:
        condition: service_started
    restart: unless-stopped
    networks:
      - app-net
    # NOTE: no ports published in prod

  # React Frontend (public)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        # Frontend will call same-origin /api, Nginx should proxy /api -> node-proxy:3000
        - REACT_APP_API_URL=/api
    container_name: auth-frontend
    ports:
      - "80:80"
    depends_on:
      node-proxy:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - app-net
